#2022.07.05
1. cuda的基本概念












#2022.07.06
参考链接：
        1. https://zhuanlan.zhihu.com/p/360897341，CUDA 编程小练习（一）。
        2. https://medium.com/@iphoenix179/running-cuda-c-c-in-jupyter-or-how-to-run-nvcc-in-google-colab-663d33f53772，Running CUDA C/C++ 
             in Jupyter or how to run nvcc in Google CoLab。
  
1. cuda环境搭建
    由于没有GPU，根据 https://zhuanlan.zhihu.com/p/360897341 中的建议采用colab进行cuda基本的程序练习。
    1.1. 打开colab，建立一个新的笔记本（然后安需要修改笔记本名字）。
    1.2. 点击代码执行程序（Runtimes）-> 选择更改运行时类型（change runtime type）->  硬件加速器（Hardware accelerator）选择GPU。
    1.3. 然后，需要安装juputer的一个插件以支持NVCC的源码编译。此部分内容与原链接中描述的稍有不同，因为在我的尝试中，原文的代码
            无法访问github（网页可以的登陆，初步排除vpn的问题）。
            - 原代码：
                    !pip install git+git://github.com/depctg/nvcc4jupyter.git
                    %load_ext nvcc_plugin
                    !nvcc --version
            - 修改过的可运行代码：
                    !pip install git+https://github.com/depctg/nvcc4jupyter.git          //将原来的"git+git:" 改为了"git+https:"
                    %load_ext nvcc_plugin
                    !nvcc --version
    1.4. 测试例程（此程序也来自与此链接）
            %%cu                                                                                                                             //当程序的语言是c/c++时，需要告诉interpreter，此处的%cu就是这个作用。
            #include <stdio.h>
            __global__ void cuda_hello()
            {
                    printf("Hello world from GPU!\n");
            }
            
            int main()
            {
                    cuda_hello<<<1,1>>>();
                    cudaDeviceSynchronize();                                                                           //由于__global__形式的函数是异步的，因此需要同步一下（除此之外需要这个函数才可以将printf显示到屏幕上）。
                    return 0;
            }
