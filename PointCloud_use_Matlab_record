# 这个文档用于记录使用matlab来处理点云数据
# 创建时间：2021.11.18
# author：YZHLhappy

此次matlab书写自定义格式：
    % Overview:
    % Created time: 20xx.xx.xx
    % Author: YZHLhappy
    % Modify record: 20xx.xx.xx des
  例如：
    % Overview:This program is used to test the processing of Point Cloud in matlab.
    % Created time: 2021.11.18
    % Author: YZHL
    % Modify record: 2021.11.18 Create this code
----------------------------------------------------------------------------------------------------------------------------------------
# 2021.11.18
1. 点云的处理所使用的Toolbox：Lidar Toolbox™ https://www.mathworks.com/help/lidar/getstarted.html?s_tid=CRUX_lftnav
  1.1 Start: 概述
   - Lidar Toolbox™ 提供用于设计、分析和测试激光雷达处理系统的算法、函数和应用程序。您可以执行对象检测和跟踪、语义分割、形状拟合、
 激光雷达注册和障碍物检测。该工具箱提供了用于激光雷达-相机交叉校准的工作流程和应用程序。
   - Lidar Viewer App支持激光雷达点云的交互式可视化和分析。您可以使用机器学习和深度学习算法（例如 PointPillars、SqueezeSegV2 和 PointNet++）
 训练检测、语义分割和分类模型。 Lidar Labeler App 支持手动和半自动标记激光雷达点云，用于训练深度学习和机器学习模型。
   - Lidar Toolbox 为感知和导航工作流提供了激光雷达处理参考示例。大多数工具箱算法都支持 C/C++ 代码生成，以便与现有代码、桌面原型设计和部署进行集成。
  1.2 I/O 输入与输出，以及可视化 https://www.mathworks.com/help/lidar/pointcloudio.html
   - Lidar Toolbox™ 目前支持读取 PLY、Velodyne® PCAP、PCD、LAS、LAZ 和 Ibeo 传感器格式的数据。
   - LAS 是一种用于存储机载激光雷达数据的行业标准（采用二进制格式）。 LAS 或 LAZ 数据文件包含激光雷达点云数据。除了激光雷达点云数据之外，LAS 数据文件还可以存储对包含表面分类数据的要素类的引用。
   - Ibeo data container (IDC) files 
   - Lidar Toolbox 支持写入 PLY 和 PCD 传感器格式
      1.2.1 Read
           - lasFileReader: LAS or LAZ file reader
           - ibeoLidarReader: Ibeo data container (IDC) file reader
           - velodyneFileReader: Read point cloud data from Velodyne PCAP file
           - pcread: Read 3-D point cloud from PLY or PCD file
      1.2.2 Write
           - pcwrite: Write 3-D point cloud to PLY or PCD file
      1.2.4 Visualization and Storage 可视化和存储
           - pcshow：Plot 3-D point cloud 绘制3D点云
           - pcshowpair：Visualize difference between two point clouds 显示出两个点云之间的差异
           - pcplayer：Visualize streaming 3-D point cloud data 可视化流式3D点云数据
           - pointCloud：Object for storing 3-D point cloud 用于存储3D点云的对象
  1.3 Preprocessing 预处理
      1.3.1 概述
           - Lidar Toolbox™ 提供下采样、中值滤波、对齐、变换和从点云中提取特征的功能。这些初步处理算法可以提高数据的质量和准确性，并获得有关点云的有价值的信息。
          这有助于加速高级工作流程并提供更好的结果。
           - 几个高级工作流需要有组织的点云进行处理。您可以使用“Unorganized to Organized Conversion of Point Clouds Using Spherical Projection”工作流程中将无组织的点云
           转换为有组织的点云。https://www.mathworks.com/help/lidar/ug/unorgaized-to-organized-pointcloud-conversion.html
           - Unorganized to Organized Conversion of Point Clouds Using Spherical Projection：3-D 激光雷达点云通常表示为一组笛卡尔坐标 (x, y, z)。点云还可以包含其他信息，
           例如强度和 RGB 值。与图像像素的分布不同，激光雷达点云的分布通常是稀疏且不规则的。处理这样的稀疏数据是低效的。为了获得紧凑的表示，您将激光雷达点云投影到球体上以创建密集的、
           基于网格的表示，称为有组织的表示。
      1.3.2 Apps
           - Lidar Viewer：Visualize and analyze lidar data
      1.3.3 Functions
           - pcdownsample：对 3D 点云进行下采样
           - pcmedian：中值滤波 3D 点云数据
           - pcdenoise：从 3D 点云中去除噪声
           - pcalign：对齐阵列点云
           - pccat：连接 3D 点云阵列
           - pcnormals：估计点云的法线
           - pctransform：变换 3D 点云
           - pcorganize：将 3D 点云转换为有组织的点云
           - lidarParameters：激光雷达传感器参数
           - pc2dem：创建点云数据的数字高程模型 (DEM) digital elevation model (DEM)
           
           - findNearestNeighbors：查找点云中某个点的最近邻居
           - findNeighborsInRadius：查找点云中某个点半径内的邻居
           - findPointsInROI：在点云中查找感兴趣区域内的点
           - removeInvalidPoints：从点云中删除无效点
           
           - extractEigenFeatures：从点云段中提取基于特征值的特征
           - extractFPFHFeatures：从点云中提取快速点特征直方图 (FPFH) 描述符
           - detectRectangularPlanePoints：检测点云中指定尺寸的矩形平面
  1.4 Labeling, Segmentation, and Detection：使用深度学习和几何算法标记、分割、检测和跟踪点云数据中的对象
      1.4.1 概述
           - Lidar Toolbox™ 包括几何和预训练的深度学习算法，用于分割点云数据以及检测和跟踪感兴趣的对象。
           - 您可以使用 Lidar Labeler App为深度学习算法准备标记的训练数据。
      1.4.2 深度学习的使用
           1.4.2.1 Getting Started with Point Clouds Using Deep Learning 
      
           1.4.2.2 Getting Started with PointPillars
      
           1.4.2.3 Getting started with PointNet++
      
           1.4.2.4 Get Started with the Lidar Labeler
      1.4.3 Labeling
           激光雷达点云中的交互式地面实况标记
      1.4.4 Segmentation
           - 使用深度学习和几何算法分割点云数据。
           - 语义分割将 3-D 点云中的每个点与类标签相关联，例如汽车、卡车、地面或植被。 Lidar Toolbox™ 提供深度学习算法来对点云数据执行语义分割。
            使用 PointSeg、SqueezeSegV2 和 PointNet++ 卷积神经网络 (CNN) 开发语义分割模型。
           - 您可以使用 segmentGroundSMRF 函数在点云数据中分割地面
           1.4.4.1 Functions
                   - Geometrical：
                     segmentGroundSMRF：使用简单形态滤波器 (SMRF) 算法从激光雷达数据中分割地面
                     segmentLidarData：将 3-D 范围数据进行聚类
                     segmentGroundFromLidarData：从有组织的激光雷达数据中分割地面点
                     pcsegdist：基于欧几里德距离将点云分割聚类
      1.4.5 Detection and Tracking
           激光雷达点云数据中的目标检测、形状拟合和跟踪。
----------------------------------------------------------------------------------------------------------------------------------------
# 2021.11.19
1. 预计测试任务：
    1.1 如何将从CloudCompare导出的数据导入Matlab进行运算，目的是将CloudCompare运算的特征量导入到Matlab进行分类计算
        1.1.1 .las/.laz格式数据
            lasReader = lasFileReader("ptCloud.las");  % ptCloud.las是从CloudCompare输出的
            ptCloud = readPointCloud(lasReader); 
            pcshow(ptCloud.Location,ptCloud.Intensity)
            结果：无法导入计算所得的特征量，估计是Matlab自带提取函数中没有这些设置。
        1.1.2 .txt格式数据
            右键.txt文件选择“导入文件” -> 选择导入文件的格式（表格，矩阵，向量等），并选择数据类型（文本，数据...）
            - 第一次处理尝试：同时将全部数据导入格式为矩阵
                测试不成功（这里指的是无法使用pcshow（）显示点云数据
            - 第二次处理尝试：将数据按照一组一组的导入，比如xyz坐标为一组，deviation为一组，surface variance为一组，以此类推...
                测试成功，可以通过pcshow()显示点云，并且可以以pcshow(xyz,feature)这样显示出点云xyz和对应的特征值颜色。
                %% 测试导入数据.txt格式
                % 状态：成功
                % 处理办法：分别导入每个feature成为一个矩阵组（保存时可以选择工作区的所有fearture
                % 变量另存为一个.mat文件，这样下次加载直接双击这个.mat文件即可载入所有的feature数据
                % （矩阵格式），然后此时可以使用pcshow(xyz,fearture)这样进行查看，并将feature作为
                % 对应的颜色值进行显示。
                pcshow(SP093_Location,SP093_Nz) %这个语句里面SP093_Location为点云的坐标，SP093_Nz为点云的法向量。
            
        1.1.3 .pcd格式
            ptCloud = pcread("ptCloud.pcd");    % ptCloud.las是从CloudCompare输出的
            pcshow(ptCloud.Location,ptCloud.Normal)
            结果：无法导入计算所得的特征量，估计是Matlab自带提取函数中没有这些设置。
    
    
    1.2 如何将导入的数据作为特征量进行分类
    
    
    1.3 如何将这些特征量导入到随机森林进行训练和分类
    
----------------------------------------------------------------------------------------------------------------------------------------    
# 2021.11.21（周日）
# 今日目标：
    1. 研究一下Matlab的随机森林分类。
    2. 尝试建立训练数据集。
    3. 如果能完成前两项，进行训练测试。
    4. 完成周报
    5. 学习C++,并记录笔记：C++ Primer Plus第六版 第二章（全部）
    6. 未来一周的研究计划
# 已完成的任务
    1. 整篇论文的架构建立完成（暂定7章内容）
    2. 未来一周的研究计划
    3. 完成周报
    4. 未完成随机森林搭建
----------------------------------------------------------------------------------------------------------------------------------------    
# 2021.11.22（周一）
# 预计目标：
    1. 如果21日没有完成随机森林的程序测试，则首要目标是完成它。
    2. 完成了随机森林的测试程序后，进行训练。
    3. 进入GoTools的Github学习这个软件的使用，并使用简单点云数据进行测试。
    4. 开始书写论文，目标：封面，第一章-引言（motivation，introduction等）
    5. 学习C++,并记录笔记：C++ Primer Plus第六版 第三章（全部）
-------------------------------------------------------------------------
# 已完成的任务
    1. 随机森林的程序搭建-完成
    2. 随机森林程序训练和测试（数据集是从网上下载的）-完成
    3. 使用自己标注（很粗略）的数据集进行训练
    4. 使用上述训练结果进行测试，结果能看，但树的分类效果欠佳。（明日改进）
# 更新目标
    1. 下一步需要建立point cloud中需要的数据集（22傍晚已建立）
    2. 改善效果
-------------------------------------------------------------------------
# 2021.11.22 记录
    1. 使用https://github.com/ttomita/RandomerForest.git中的数据集abalone进行随机森林的测试
       程序结构参考了https://zhuanlan.zhihu.com/p/367491476文中的程序，但文中程序是regression，我这里是classification
       因此需要将
            RFModel=TreeBagger(2000,Input_train,Output_train,'Method','regression','OOBPrediction','On','MinLeafSize',RFLeaf(i));
       中的regression改为classification。
            RFModel=TreeBagger(2000,Input_train,Output_train,'Method','classification','OOBPrediction','On','MinLeafSize',RFLeaf(i));
       - 选择最优叶子数和树的数量
            这一步我遇到了循环5此后得到的数据有两个最优解：一个是nLeaf=20，nTree=65和57；另一个是nLeaf=50，nTree=107和36。
            我最终选择了
                nLeaf = 20;
                nTree = 60;
       - 循环（为了对机器学习进行多次测试）
       
       - 数据划分（我没有使用到这一步，因为参考数据集中已经分类好了）
       - 随机森林的实现
            nLeaf = 20;
            nTree = 60;
            RFModel_train=TreeBagger(nTree,Input_train,Output_train,'Method','classification',...
                                     'OOBPredictorImportance','on', 'MinLeafSize',nLeaf);
       - 精度衡量
            [RFPredictYield,RFPredictConfidenceInterval]=predict(RFModel_train,Input_test);
            这部分遇到问题：
            - “未定义与 'cell' 类型的输入参数相对应的函数 'minus'”
                问题原因：由于TreeBagger输出的RFPredictYield为“cell”格式，需要转换为“矩阵”数据。
                解决办法：https://ww2.mathworks.cn/help/matlab/ref/cell2mat.html
                        A = cell2mat(C)；
            - RFPredictConfidenceInterval结果为三个数值，三个数值和为1，我猜测它们的含义为：这里面有三个标签（0，1，2），
            因此每个结果是对应每个标签的概率。
            
       - 变量重要程度排序
            成功输出
            不过这位作者书写得程序有很多值得学习的地方，仍需要进一步理解这些语法。
       - 保存模型
            成功保存，并尝试导入模型使用；
                %% 载入训练过的模型RF_abalone.mat，载入后可直接调用模型
                load('RF_abalone.mat'); 
                %% 使用模型进行预测
                [RFPredictYield,RFPredictConfidenceInterval]=predict(RFModel_train,Input_test);
    2. 将“选择最优叶子数和树的数量”修改为FindOptimizationTreesandLeaf.m函数
        功能：根据输入参数，plot出不同叶子树和不同数量的树对应的误差（越小越好）
              使用者可以观察后选出最有值（因为多次循环后，最优值不一定只有一个，需要自己判断）
        输出：plot几个误差图
    3. 使用CloudCompare分割功能进行手动分割，以此创建数据集，数据集的类别目前包含(5类）：
        - dam，Label:0
        - grass Label: 1
        - hourse label: 2
        - surface Label: 3
        - tree Label: 4
        3.1 训练了两组随机森林模型
            - 第一组使用了每个类别5000点数据进行训练，测试结果还行，但用其他数据测试结果不好（树和面基本算成一类了）。
            - 第二组数据使用了当时我所有的数据集（自制粗略数据集），数和面的效果得到了巨大的改善，但仍有部分树被归为了面。
----------------------------------------------------------------------------------------------------------------------------------------
#2021.11.23（周二）
# 预计目标：
    1. 使用已有（22日）随机森林训练模型进行测试。
    2. 书写论文第二章（点云相关的基本概念）。
    3. 进一步研究GoTools，争取能导出所需要的数据。
    4. 查询Matlab使用ANN算法分类的可能性
-------------------------------------------------------------------------------
# 已完成的任务
    1. 建立新的训练数据集（相对精修）
    2. 目前在使用新数据集训练，由于数据集过大，目前过了1个小时还未训练结束。
    3. 正在准备尝试ANN在matlab上的使用
    4. 
# 更新目标
    1. 训练完随机森林（新数据集）
    2. 使用昨天的数据进行测试
    3. 搭建初步的ANN程序架构
-------------------------------------------------------------------------------
1. 总结昨天训练集的问题：
    - 训练集中数的样本过少
    - 训练集中房子的样本过少
    - 训练集中面的样本过于单一
2. 改进数据集：
    - 粗暴的改进（用于测试）：加入了多个区域的树样本，并进行一定程度的精修。
    - 增加了房子样本（但由于数据中房子样本本身过少，难以增加很多）。
    - 对各类数据进行一定程度的精修和去噪，希望可以提高模型精度
3. 训练
    - 合并数据集后开始训练，目前已训练超过1个半小时还未结束。
    - 针对上述情况，我决定等这次训练完以后保存训练模型，并减少训练集中树的样本，因为新样本中树的样本数量太多了，有点过了。
    - 为了平衡训练时间的问题，我决定在数量级合适的情况下加强精修，使用干扰更少的数据集进行尝试。
    
4. ANN搭建
    发现了matlabToolBox中已经有了这些分类器，尝试了2层和3曾神经网络，根据matlab的建议，我的数据集不太适用于神经网络。
    
----------------------------------------------------------------------------------------------------------------------------------------
# 2021.11.24（周三）
    1. 如果有可能使用ANN在Matlab中，则尝试使用ANN搭建点云分类算法。
    2. 如果不行，则转战python，看如何操作。
    3. 书写论文第三章：点云处理的相关算法和流程，相关研究综述，部分算法的介绍。
    4. GoTools研究1小时（由于内容未知，暂定任务量为时间）
-------------------------------------------------------------------------------
# 已完成的任务
    1. 使用ToolBox中的分类器进行ANN网络训练
    2. 使用训练出RandomForest的进行测试（此模型使用的数据集包含490万个数据点信息，模型保存为：）
    3. 正在准备尝试ANN在matlab上的使用
    4. 
# 更新目标
    1. 训练完随机森林（新数据集）
    2. 使用昨天的数据进行测试
    3. 搭建初步的ANN程序架构
    
    
----------------------------------------------------------------------------------------------------------------------------------------
# 2021.11.25（周四）
    1. ANN搭建完成，尝试训练和测试。
    2. SVM分类算法在Matlab上搭建，如果可行，尽力搭建出来。
    3. 书写论文第三章：完成这部分内容
----------------------------------------------------------------------------------------------------------------------------------------   
    
    
# 2021.11.26（周五）
    1. Meeting
    2. 如果SVM和ANN搭建完成，开始进行测试。
    3. 合并所有算法（SVM,ANN,Random forest)，书写Matlab程序进行方位运算并得出结果数据
    4. 记录数据并进行对比
----------------------------------------------------------------------------------------------------------------------------------------
# 2021.11.27（周六）
    1. 如果周五完成了对比（上述三种方法），则休息一天
    2. 如果没有完成，则完成它。
    3. 将结果书写到论文中。
# 2021.11.28（周日）
    1. 周报
    2. 竖写论文第三章（如果没有完成的话）
----------------------------------------------------------------------------------------------------------------------------------------
# 2021.11.29
    1. 回复邮件多个问题--已完成
    2. 建立新的数据集 
    3. 测试matlab pointNet
    4. 建立评价标准
    5. 准备会议
-----------------------------------------------------------------------------
1. 回复邮件
2. 建立新的数据集
    计划分类：   
        数据集1：（34 features） trainDaten_I_ x34_20211129_17
            - 平面（舍弃）改为房子和dam
            - 树
            - 山体表面
            - 草地
        数据集2：（34 features）
            - 山体表面
            - 人类居住地
            - 树
        数据集3：（10 feayures）
            - 平面（舍弃）改为房子和dam
            - 树
            - 山体表面
            - 草地   
        数据集4：（10 feayures）
            - 山体表面
            - 人类居住地
            - 树
     准备计算特征值：
        重要参数：
            - surface approximation： Local surface model：plane/Quadirc/Triangulation
            - neighbors: Octree-radius:auto 还是其他，auto要注意什么，理论上radius越大，法向量越平滑
            - orientation：mini tree ，knn= ？，理论上这个越大越精确，但计算时间也越长
-----------------------------------------------------------------------------
    
# 2021.11.30
    1. 会议
    2. 开始segmentation的程序（region based），使用matlab（未执行）
    3. 再次安装pcl的windows环境（未执行）
    4. 如果matlab分割不成，则改用pcl（未执行）
    5. 写论文（未执行）
--------------------------------------------------------------------------------------------
# 2021.12.01
    1. convert 3D point cloud to range image（未执行）
    2. 使用图像处理算法（未执行）
    3. 写论文（未执行）
# 执行的任务
    1. 使用rasterize对点云进行栅格化处理，此处理大大减小了点云数量和运算量，并且解决了点云不均匀的问题
    2. 测试PointNet++(在matlab上）,例程测试完成，接下来准备尝试套用自己的数据
    3. 使用栅格化后的点云进行分类处理，效果不错
--------------------------------------------------------------------------------------------
# 2021.12.02
    1. 设置和编写评价标准
    2. 将评价标准写成函数
    3. 测试评价标准（栅格化后的数据和未栅格的数据）
    4. 想办法使用pointNet++对自己的数据进行处理
-------------------------------------------------------------------------------------- 
    1. 点云分类和分割评价体系
        - Classification method: overall accuracy , mean accuracy
            accuracy = (TP+TN)/(TP+TN+FP+FN);
            参考：https://blog.csdn.net/Hello_Chan/article/details/108672379
            TP: True Positive
            FN: False Negative
            FP: False Positive
            TN: True Negative
            根据“Jason Joseph Rebello (2021). True Positives, False Positives, True Negatives, False Negatives from 2 Matrices 
            (https://www.mathworks.com/matlabcentral/fileexchange/47364-true-positives-false-positives-true-negatives-false-negatives-from-2-matrices), 
            MATLAB Central File Exchange. Retrieved December 2, 2021.”的程序，自己修改了一下，将原有的只可以计算0和1的取值范围进行了扩展，现在可以取任意值了。
            程序已上传到github（2021.12.02.17:46)
        
        
        - Segmentation models: accuracy , (m)IoU
        
        
        - detection tasks: (m)IoU , accuracy , precision , recall
        
        
        - Object tracking: MOTA , MOTP
        
        
        - scene for estimation: EPE
        
        
        - 3D match and registration models: ROC curves

    
  
